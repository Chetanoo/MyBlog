type Query {
  hello: String!
  posts(cursor: String, limit: Int!): PaginatedPosts!
  post(id: Float!): Post
  me: User
}

type PaginatedPosts {
  posts: [Post!]!
  hasMore: Boolean!
}

type Post {
  id: String!
  createdAt: String!
  updatedAt: String!
  title: String!
  text: String!
  rating: Float!
  creatorId: Float!
  textSnippet: String!
}

type User {
  id: String!
  createdAt: String!
  updatedAt: String!
  username: String!
  email: String!
}

type Mutation {
  createPost(input: PostInput!): Post!
  updatePost(title: String!, id: Float!): Post!
  deletePost(id: Float!): Boolean!
  changePassword(newPassword: String!, token: String!): UserResponse!
  forgotPassword(email: String!): Boolean!
  register(options: UsernamePasswordInput!): UserResponse!
  login(password: String!, usernameOrEmail: String!): UserResponse!
  logout: Boolean!
}

input PostInput {
  title: String!
  text: String!
}

type UserResponse {
  errors: [FieldError!]
  user: User
}

type FieldError {
  field: String!
  message: String!
}

input UsernamePasswordInput {
  username: String!
  password: String!
  email: String!
}
